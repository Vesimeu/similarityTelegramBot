import asyncio
import random
from telebot import types
import logging

logger = logging.getLogger(__name__)

from keyboards.keyboards import main_menu_keyboard
# TODO: –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# –®–∞–±–ª–æ–Ω: —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—ã –±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
# from services.matching_service import MatchingService

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞ (–±—É–¥—É—Ç –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ —Å–µ—Ä–≤–∏—Å/—Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
current_search_results = {}
user_skip_settings = {}
awaiting_skip_input = set()
awaiting_temp_skip_input = set()

async def handle_find_pair(bot, message, matching_service, user_data, current_search_results, user_skip_settings):
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ –ø–∞—Ä—ã.")
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞
    if user_id in user_skip_settings:
        user_skip_settings[user_id]['temporary'] = 0
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üåÑ –ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç", callback_data="skip_default"),
        types.InlineKeyboardButton("ü¶ã –ü–æ–∏—Å–∫ —Å –ø—Ä–æ–ø—É—Å–∫–æ–º", callback_data="skip_temp")
    )
    await bot.send_message(
        user_id,
        "‚ú® *–û, –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç–æ–∫ –≤ —Å–∞–¥–∞—Ö –í–µ–ª–∏–∫–æ–≥–æ –î—É—Ö–∞!* ‚ú®\n\n"
        "ü¶Ö –ö–æ–Ω–¥–æ—Ä —Å—É–¥—å–±—ã –ø—Ä–∏–Ω–µ—Å –≤–µ—Å—Ç—å –æ –≤–∞—à–µ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–∞–π—Ç–∏ —Ä–æ–¥–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ.\n\n"
        "‚òÄÔ∏è *–ï—Å–ª–∏ —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—à–∞–µ—Ç, —Ç–æ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è –∑–¥–µ—Å—å https://parmesan-perm.ru/ :*\n"
        "‚Ä¢ *–ü—É—Ç—å –ú—É–¥—Ä–æ–≥–æ –ò—Å–∫–∞—Ç–µ–ª—è* - —Å—Ç—É–ø–∞–π—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—è N –∞–Ω–∫–µ—Ç –Ω–∞–≤—Å–µ–≥–¥–∞\n"
        "‚Ä¢ *–ú–∏–≥ –°—É–¥—å–±—ã* - –ª–∏—à—å –æ–¥–Ω–∞–∂–¥—ã —Å–≤–µ—Ä–Ω–∏—Ç–µ —Å —Ç—Ä–æ–ø—ã, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è\n\n"
        "üåï *–°–≤—è—â–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:*\n"
        "–í–∏–∂—É –≤ –¥—ã–º–µ —Å–≤—è—â–µ–Ω–Ω–æ–π —Ç—Ä–∞–≤—ã - –≤–∞—à–∞ —Å—É–¥—å–±–∞ —É–∂–µ –ø–ª–µ—Ç–µ—Ç –∑–æ–ª–æ—Ç—ã–µ –Ω–∏—Ç–∏ –≤—Å—Ç—Ä–µ—á–∏!\n\n"
        "üåæ *–ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–µ–¥–∫–æ–≤ –≥–ª–∞—Å–∏—Ç:*\n"
        "–ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Å–≤–æ–π –ø—É—Ç—å, —Å–æ–∂–≥–∏—Ç–µ —Å—Ç–∞—Ä—É—é –∞–Ω–∫–µ—Ç—É –≤ —Å–≤—è—â–µ–Ω–Ω–æ–º –æ–≥–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
        reply_markup=markup,
        parse_mode="Markdown"
    )

# –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞
async def show_partner_profile(bot, user_id, matching_service):
    if user_id not in current_search_results:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏ –ø–æ–∏—Å–∫–∞ ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        await handle_find_pair(bot, None, matching_service, {}, current_search_results, user_skip_settings)
        return
    data = current_search_results[user_id]
    try:
        partner = await matching_service.get_partner_profile(user_id, data["current_index"])
        if not partner:
            await bot.send_message(user_id, "üè∞ –í—Å–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!", parse_mode="Markdown")
            del current_search_results[user_id]
            return
        # ... –∑–¥–µ—Å—å —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ...
        keyboard = types.InlineKeyboardMarkup()
        # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ next/prev/like –∏ —Ç.–¥.
        await bot.send_message(user_id, f"–ü—Ä–æ—Ñ–∏–ª—å: {partner}", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è.")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∞–Ω–∫–µ—Ç–∞–º (next/prev)
async def handle_navigation(bot, call, matching_service):
    user_id = call.from_user.id
    if user_id not in current_search_results:
        await bot.answer_callback_query(call.id, "‚ùå –°–µ—Å—Å–∏—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞")
        return
    data = current_search_results[user_id]
    if call.data == "next_profile":
        data["current_index"] += 1
    elif call.data == "prev_profile":
        data["current_index"] = max(0, data["current_index"] - 1)
    await show_partner_profile(bot, user_id, matching_service)
    await bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ skip
async def handle_skip_input(bot, message, matching_service):
    user_id = message.from_user.id
    try:
        skip_count = int(message.text)
        if 0 <= skip_count <= 10:
            user_skip_settings[user_id] = {'permanent': skip_count, 'temporary': 0}
            awaiting_skip_input.discard(user_id)
            await bot.send_message(user_id, f"‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —à–∞–≥: {skip_count} –∞–Ω–∫–µ—Ç\nüîÆ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...", parse_mode="Markdown")
            await handle_find_pair(bot, message, matching_service, {}, current_search_results, user_skip_settings)
        else:
            await bot.send_message(user_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10", parse_mode="Markdown")
    except ValueError:
        await bot.send_message(user_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–æ–≤–æ–≥–æ skip
async def handle_temp_skip_input(bot, message, matching_service):
    user_id = message.from_user.id
    try:
        skip_count = int(message.text)
        if skip_count >= 0:
            perm = user_skip_settings.get(user_id, {}).get('permanent', 0)
            user_skip_settings[user_id] = {'permanent': perm, 'temporary': skip_count}
            awaiting_temp_skip_input.discard(user_id)
            await bot.send_message(user_id, f"‚è© –ë—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ {skip_count} –∞–Ω–∫–µ—Ç (—Ä–∞–∑–æ–≤–æ)\n‚öôÔ∏è –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —à–∞–≥: {perm} –∞–Ω–∫–µ—Ç\nüîÆ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...", parse_mode="Markdown")
            await handle_find_pair(bot, message, matching_service, {}, current_search_results, user_skip_settings)
        else:
            await bot.send_message(user_id, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", parse_mode="Markdown")
    except ValueError:
        await bot.send_message(user_id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", parse_mode="Markdown")

# Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ skip
async def handle_skip_mode(bot, call):
    user_id = call.from_user.id
    if call.data == "skip_default":
        awaiting_skip_input.add(user_id)
        await bot.send_message(user_id, "üî¢ –í–≤–µ–¥–∏—Ç–µ –ü–û–°–¢–û–Ø–ù–ù–´–ô —à–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞ —Ü–∏—Ñ—Ä–æ–π (–æ—Ç 0 –¥–æ 10):", parse_mode="Markdown")
    else:
        awaiting_temp_skip_input.add(user_id)
        await bot.send_message(user_id, "‚è© –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∫–µ—Ç –¥–ª—è –†–ê–ó–û–í–û–ì–û –ø—Ä–æ–ø—É—Å–∫–∞:", parse_mode="Markdown")
    await bot.answer_callback_query(call.id)

# Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ like
async def handle_like(bot, call, matching_service):
    user_id = call.from_user.id
    partner_id = int(call.data.split('_')[1])
    await matching_service.like_partner(user_id, partner_id)
    await bot.answer_callback_query(call.id, "üíå –°–∏–º–ø–∞—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    # –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
    current_search_results[user_id]["current_index"] += 1
    await show_partner_profile(bot, user_id, matching_service) 