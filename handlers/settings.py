import logging
from telebot import types

logger = logging.getLogger(__name__)

async def handle_visibility_settings(bot, user_id, profile_service):
    profile = await profile_service.get_profile(user_id)
    if not profile:
        await bot.send_message(user_id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    visibility = profile.get("visibility", {
        "name": True, "age": True, "gender": True, "city": True,
        "email": True, "photo_url": True, "social_links": True, "interests": True, "phone": True
    })
    visibility_status = "üëÄ –¢–µ–∫—É—â–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–ª–µ–π:\n"
    for field, is_visible in visibility.items():
        status = "üü¢ –í–∏–¥–∏–º–æ" if is_visible else "üî¥ –°–∫—Ä—ã—Ç–æ"
        visibility_status += f"{field.capitalize()}: {status}\n"
    # TODO: –≤—ã–Ω–µ—Å—Ç–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ keyboards
    visibility_keyboard = types.InlineKeyboardMarkup()
    visibility_keyboard.row(
        types.InlineKeyboardButton("üë§ –ò–º—è", callback_data="toggle_visibility_name"),
        types.InlineKeyboardButton("üéÇ –í–æ–∑—Ä–∞—Å—Ç", callback_data="toggle_visibility_age"),
        types.InlineKeyboardButton("üöª –ì–µ–Ω–¥–µ—Ä", callback_data="toggle_visibility_gender")
    )
    visibility_keyboard.row(
        types.InlineKeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥", callback_data="toggle_visibility_city"),
        types.InlineKeyboardButton("üìß Email", callback_data="toggle_visibility_email"),
        types.InlineKeyboardButton("üåê URL", callback_data="toggle_visibility_url")
    )
    visibility_keyboard.row(
        types.InlineKeyboardButton("üîó –°–æ—Ü—Å–µ—Ç–∏", callback_data="toggle_visibility_social_links"),
        types.InlineKeyboardButton("üé® –ò–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="toggle_visibility_interests"),
        types.InlineKeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="toggle_visibility_phone")
    )
    await bot.send_message(user_id, visibility_status, reply_markup=visibility_keyboard)

async def handle_toggle_visibility(bot, call, profile_service):
    user_id = call.from_user.id
    field = call.data.replace("toggle_visibility_", "")
    profile = await profile_service.get_profile(user_id)
    if not profile:
        await bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    visibility = profile.get("visibility", {
        "name": True, "age": True, "gender": True, "city": True,
        "email": True, "photo_url": True, "social_links": True, "interests": True, "phone": True
    })
    visibility[field] = not visibility.get(field, True)
    await profile_service.update_profile(user_id, {"visibility": visibility})
    status = "–≤–∏–¥–∏–º–æ" if visibility[field] else "—Å–∫—Ä—ã—Ç–æ"
    await bot.answer_callback_query(call.id, f"‚úÖ –ü–æ–ª–µ '{field}' —Ç–µ–ø–µ—Ä—å {status}.")
    await handle_visibility_settings(bot, user_id, profile_service)

async def handle_reset_preferences(bot, call, profile_service):
    user_id = call.from_user.id
    profile = await profile_service.get_profile(user_id)
    current_name = profile.get("name", "") if profile else ""
    await profile_service.update_profile(user_id, {
        "name": current_name,
        "age": None,
        "gender": None,
        "city": None,
        "photo_url": None,
        "preferences": {"gender": "–õ—é–±–æ–π", "preferred_city": "", "preferred_keyword": ""},
        "visibility": {
            "name": True, "age": True, "gender": True, "city": True,
            "email": False, "photo_url": False, "social_links": False, "interests": False, "phone": False
        }
    })
    await bot.answer_callback_query(call.id, "‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
    await handle_visibility_settings(bot, user_id, profile_service) 